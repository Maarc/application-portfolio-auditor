
var isSimpleList = true;
var isLogScale = true;
var isSortByName = false;

const dataClocUri = "data:text/plain;base64," + btoa(longTextCloc);
const dataLinguistUri = "data:text/plain;base64," + btoa(longTextLinguist);

const colors = ["#0070ec", "#ff7f0e", "#03ab00", "#d62728", "#ffc700", "#9467bd", "#e377c2", "#17becf", "#89969f", "#1a98ff", "#fff0bc", "#b9ecac", "#a44200", "#1d7874", "#911eb4", "#46f0f0", "#f032e6", "#bcf60c", "#fabebe", "#9a6324", "#800000", "#ffd8b1", "#808080", "#e6194b", "#0ee000", "#4e0fef", "#f5f107", "#000000"];

const tooltip = d3.select("body")
  .append("div")
  .style("position", "absolute")
  .style("z-index", "10")
  .style("font-size", "10pt")
  .style("visibility", "hidden");

// Functions that change the tooltip when user hover / move / leave a cell
function mouseover() {
  d3.select(this)
    .style("stroke", "grey")
    .style("opacity", 0.9);
  return tooltip.style("visibility", "visible");
}

function mouseout() {
  d3.select(this)
    .style("stroke", "none")
    .style("opacity", 1)
  return tooltip.style("visibility", "hidden");
}

// Used to add thousands separator dots on tooltips.
function numberWithDots(x) {
  return x ? x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".") : "";
}

// Map containing the total LoCs for each langugage
const sumKeys = {}

// Compute max values for each column
function computeSumKeys(data) {
  let columns = data.columns;
  // Initializes sumKeys to { 0, 0 , 0 ...}
  for (let i = 1; i < columns.length; ++i) {
    sumKeys[columns[i]] = 0;
  }
  // Calculates sumKeys
  for (let i = 1; i < columns.length; ++i) {
    sumKeys[columns[i]] = sumKeys[columns[i]] + d3.sum(data, d => d[columns[i]]);
  }
}

function computeTotal(data) {
  var columns = data.columns;
  data.map(function (d) {
    let total = 0;
    for (var i = 1; i < columns.length; ++i) {
      total += Number(d[columns[i]])
    }
    d.total = total;
  })
}

// Inspired from  https://bl.ocks.org/Andrew-Reid/0aedd5f3fb8b099e3e10690bd38bd458
function drawAll(data) {
  // Cleanup current drawing
  d3.selectAll("svg > *").remove();

  // Create a new one
  const svg = d3.select("svg"),
    margin = { top: 40, right: 20, bottom: 40, left: 340 },
    width = +svg.attr("width") - margin.left - margin.right,
    height = +svg.attr("height") - margin.top - margin.bottom,
    g = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  const x = isLogScale ? d3.scaleLog().range([0, width]).clamp(true) : d3.scaleLinear().rangeRound([0, width]);
  const y = d3.scaleBand().rangeRound([0, height]).paddingInner(0.1).align(0.1);

  const keys = data.columns.slice(1);
  // Sort languages starting with the ones having the lowest total LoCs
  keys.sort(function (a, b) {
    return Number(sumKeys[a]) - Number(sumKeys[b]);
  });

  if (isSortByName) {
    data.reverse();
  } else {
    data.sort(function (a, b) {
      return Number(b.total) - Number(a.total);
    });
  }

  const usedColors = colors.slice(0, keys.length).reverse();
  const z = d3.scaleOrdinal().range(usedColors);

  x.domain([1, d3.max(data, function (data) { return data.total; })]).nice();
  y.domain(data.map(function (d) { return d.App; }));
  z.domain(keys);

  g.append("g")
    .selectAll("g")
    .data(d3.stack().keys(keys)(data))
    .enter().append("g")
    .attr("fill", function (d) { return z(d.key); })
    .selectAll("rect")
    .data(function (d) { return d; })
    .enter().append("rect")
    .attr("y", function (d) { return y(d.data.App); })
    .attr("x", function (d) { return x(d[0]); })
    .attr("width", function (d) { return x(d[1]) - x(d[0]); })
    .attr("height", y.bandwidth())
    .attr("loc", function (d) { return d[1] - d[0]; })
    .on("mouseover", mouseover)
    .on("mousemove", function () {
      let i = usedColors.indexOf(this.parentNode.getAttribute("fill"));
      tooltip.html("<b>" + keys[i] + "</b>: " + numberWithDots(this.getAttribute("loc")) + " lines");
      return tooltip.style("top", (event.pageY - 5) + "px").style("left", (event.pageX + 20) + "px");
    })
    .on("mouseout", mouseout);

  g.append("g")
    .attr("class", "axis")
    .attr("transform", "translate(0,0)")
    .call(d3.axisLeft(y));

  // x axis (top)
  const xAxisTop = g.append("g")
    .attr("class", "axis")
    // New line
    .attr("transform", "translate(0," + (-10) + ")")

  // Text for x-axis (top)
  xAxisTop.append("text")
    .attr("y", -15)
    .attr("x", x(x.ticks().pop()) - 30)
    .attr("dy", "0.32em")
    .attr("fill", "#000")
    .attr("font-weight", "bold")
    .attr("text-anchor", "start")
    .text("Applications (LoC)")
    // New line
    .attr("transform", "translate(" + (-width - 105) + ",5)");

  xAxisTop.call(d3.axisTop(x).ticks(isLogScale.value ? 15 : undefined, ",.1s"));

  // Legend
  const legend = g.append("g")
    .attr("font-family", "sans-serif")
    .attr("text-anchor", "end")
    .selectAll("g")
    .data(keys.slice().reverse())
    .enter().append("g")
    .attr("transform", function (d, i) { return "translate(-5," + (height / 3 - 20 / 3 * keys.length - 20 + i * 20) + ")"; });

  legend.append("rect")
    .attr("x", width - 18)
    .attr("y", 0)
    .attr("width", 18)
    .attr("height", 18)
    .attr("fill", z);

  legend.append("text")
    .attr("x", width - 24)
    .attr("y", 9.5)
    .attr("dy", "0.32em")
    .text(function (d) { return d; });
}

async function drawDiagram() {
  d3.csv(isSimpleList ? dataLinguistUri : dataClocUri)
    .then(function (data) {
      computeSumKeys(data);
      computeTotal(data);
      drawAll(data);
    })
    .catch(function (error) { throw error; })
}

var onchange = async function() {
  this.isSimpleList = $("#simpleSwitch").is(":checked");
  this.isLogScale = $("#scaleSwitch").is(":checked");
  this.isSortByName = $("#sortSwitch").is(":checked");
  await drawDiagram();
}

$("#scaleSwitch").on('change', onchange);
$("#sortSwitch").on('change', onchange);
$("#simpleSwitch").on('change', onchange);

onchange()

// Collapsing panels
$('.collapse').on('show.bs.collapse', function () { $(this).siblings('.panel-heading').addClass('active');});
$('.collapse').on('hide.bs.collapse', function () { $(this).siblings('.panel-heading').removeClass('active');});
</script>

</body>
</html>
