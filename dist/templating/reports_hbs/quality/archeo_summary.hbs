<!DOCTYPE html>
<html lang="en">
<head>
  {{> header title='Quality reports - Archeologist'}}
</head>
<body>
  {{#> tool_header is_summary_header=true}}
    {{#*inline "page_title"}}Quality reports{{/inline}}
    {{#*inline "page_description"}}Consolidated code quality findings.{{/inline}}
    {{#*inline "page_url"}}quality.html{{/inline}}
    {{#*inline "tool_name"}}Archeologist{{/inline}}
    {{#*inline "tool_description"}}Find unsupported and unnecessary ancient libraries in your applications.{{/inline}}
    {{#*inline "tool_url"}}https://github.com/vmware-tanzu/application-portfolio-auditor/blob/main/16__archeo__extract.sh{{/inline}}
    {{#*inline "tool_version"}}{{TOOL_VERSION}}{{/inline}}
    {{#*inline "tool_url_report"}}16__ARCHEO{{/inline}}
    {{#*inline "tool_url_log"}}{{ARCHEO_LOG}}{{/inline}}
    {{#*inline "tool_image"}}archeo.png{{/inline}}
  {{/tool_header}}

  <div class="container">
    <div class="row justify-content-center">
      <div class="col-8">
        <div id="app_support_data_viz"></div>
      </div>
    </div>
    <div class="row justify-content-center">
      <div class="col-8">
        <div id="lib_support_data_viz"></div>
      </div>
    </div>
  </div>

  {{> footer}}

  <!-- Bootstrap core JavaScript -->
  <script src="./../static/js/jquery-{{JQUERY_VERSION}}.min.js"></script>
  <script src="./../static/bootstrap-{{BOOTSTRAP_VERSION}}-dist/js/bootstrap.bundle.min.js"></script>
  <script src="./../static/js/d3.v{{D3_VERSION}}.min.js"></script>
  <script>
    const colorFindingPurple = getComputedStyle(document.documentElement).getPropertyValue('--findingPurple');
    const colorFindingRed = getComputedStyle(document.documentElement).getPropertyValue('--findingRed');
    const colorFindingOrange = getComputedStyle(document.documentElement).getPropertyValue('--findingOrange');
    const colorFindingYellow = getComputedStyle(document.documentElement).getPropertyValue('--findingYellow');
    const colorFindingGreen = getComputedStyle(document.documentElement).getPropertyValue('--findingGreen');
    const colorTextNormal = getComputedStyle(document.documentElement).getPropertyValue('--bs-body-color');
    const colorTextWhite = '#ffffff';

    function drawPie(div_name, data, data_viz_width, data_viz_height, data_viz_margin, line_1_count, line_1_text, line_2_text, log_scale) {
      // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.
      const radius = Math.min(data_viz_width, data_viz_height) / 2 - data_viz_margin
      const svg = d3.select(div_name)
        .append("svg")
          .attr("width", data_viz_width)
          .attr("height", data_viz_height)
        .append("g")
          .attr("transform", `translate(${data_viz_width/2},${data_viz_height/2})`);

      if (log_scale) {
        // Define the log scale
        const logScale = d3.scaleLog()
        .domain([1, d3.max(data, d => d.count)+1]) // Set the domain to start from 1 to avoid log(0)
        .range([1, 20]); // Map the log scale to values between 1 and 20
        pie = d3.pie()
          .sort(null) // Do not sort group by size
          .value(d => logScale(d.count))
      } else {
        // Compute the position of each group on the pie:
        pie = d3.pie()
          .sort(null) // Do not sort group by size
          .value(d => d.count)
      }
      const data_ready = pie(data)

      // The arc generator
      const arc = d3.arc()
        .innerRadius(radius * 0.5) // Size of the donut hole
        .outerRadius(radius * 0.8)

      // Another arc that won't be drawn. Just for labels positioning
      const outerArc = d3.arc()
        .innerRadius(radius * 0.9)
        .outerRadius(radius * 0.9)

      // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
      svg
        .selectAll('allSlices')
        .data(data_ready.filter(d => d.data.count > 0))
        .join('path')
        .attr('d', arc)
        .attr('fill', d => d.data.color)
        .attr("stroke", "white")
        .style("stroke-width", "2px")
        .style("opacity", 1)

      // Add the polylines between chart and labels:
      svg
        .selectAll('allPolylines')
        .data(data_ready.filter(d => d.data.count > 0))
        .join('polyline')
          .attr("stroke", "black")
          .style("fill", "none")
          .attr("stroke-width", 1)
          .attr('points', function(d) {
            const posA = arc.centroid(d) // line insertion in the slice
            const posB = outerArc.centroid(d) // line break: we use the other arc generator that has been built only for that
            const posC = outerArc.centroid(d); // Label position = almost the same as posB
            const midangle = d.startAngle + (d.endAngle - d.startAngle) / 2 // we need the angle to see if the X position will be at the extreme right or extreme left
            posC[0] = radius * 0.95 * (midangle < Math.PI ? 1 : -1); // multiply by 1 or -1 to put it on the right or on the left
            return [posA, posB, posC]
          })

      // Add the text for the polylines:
      svg
        .selectAll('allLabels')
        .data(data_ready.filter(d => d.data.count > 0))
        .join('text')
          .text(d => d.data.label+' ('+d.data.count+')')
          .attr('transform', function(d) {
              const pos = outerArc.centroid(d);
              const midangle = d.startAngle + (d.endAngle - d.startAngle) / 2
              pos[0] = radius * 0.99 * (midangle < Math.PI ? 1 : -1);
              return `translate(${pos})`;
          })
          .style('text-anchor', function(d) {
              const midangle = d.startAngle + (d.endAngle - d.startAngle) / 2
              return (midangle < Math.PI ? 'start' : 'end')
          })

      // Add HTML content using foreignObject
      const foreignObject = svg.append('foreignObject')
          .attr('x', -data_viz_width / 4) // Adjust position as needed
          .attr('y', -data_viz_height / 12) // Adjust position as needed
          .attr('width', data_viz_width / 2) // Adjust size as needed
          .attr('height', data_viz_height / 2 ); // Adjust size as needed

      foreignObject.append('xhtml:div')
        .html('<div style="text-align:center;color:black;font-size:16px;"><span style="font-size:30px;font-weight:bold;">'+line_1_count+'&nbsp;</span>'+line_1_text+'<br/>'+line_2_text+'</div>');
    }

    // Values of the support data graph
    const apps_total = {{ARCHEO_SUMMARY__APPS_ALL}}
    const apps_unsupported = {{ARCHEO_SUMMARY__APPS_UNSUPPORTED}}
    const apps_commercial_only = {{ARCHEO_SUMMARY__APPS_ONLY_COMMERCIAL_SUPPORTED}}
    const apps_expiring_oss = {{ARCHEO_SUMMARY__APPS_OSS_SUPPORT_ENDING_SOON}}
    const apps_supported = {{ARCHEO_SUMMARY__APPS_SUPPORTED}}
    const apps_irrelevant = {{ARCHEO_SUMMARY__APPS_NOT_RELEVANT}}

    const libs_total = {{ARCHEO_SUMMARY__LIBS_ALL}}
    const libs_supported = {{ARCHEO_SUMMARY__LIBS_SUPPORTED}}
    const libs_supportable = {{ARCHEO_SUMMARY__LIBS_SUPPORTABLE}}
    const libs_unsupportable = {{ARCHEO_SUMMARY__LIBS_NON_SUPPORTABLE}}
    const libs_expiring_oss = {{ARCHEO_SUMMARY__LIBS_OSS_SUPPORT_ENDING_SOON}}
    const libs_commercial_only = {{ARCHEO_SUMMARY__LIBS_ONLY_COMMERCIAL_SUPPORTED}}
    const libs_unsupported = {{ARCHEO_SUMMARY__LIBS_UNSUPPORTED}}
    const libs_duplicated = {{ARCHEO_SUMMARY__LIBS_DUPLICATED}}
    const libs_undesirable = {{ARCHEO_SUMMARY__LIBS_UNDESIRABLE}}

    const app_support_data = [
      { id: 1, label: 'Supported', count: apps_supported, color: colorFindingGreen },
      { id: 2, label: 'Expiring OSS', count: apps_expiring_oss, color: colorFindingOrange },
      { id: 3, label: 'Commercial only', count: apps_commercial_only, color: colorFindingRed },
      { id: 4, label: 'Unsupported', count: apps_unsupported, color: colorFindingPurple },
      { id: 5, label: 'Other', count: apps_irrelevant, color: '#ccc' },
    ];

    const lib_support_data = [
      { id: 1, label: 'Supported', count: libs_supported, color: colorFindingGreen },
      { id: 2, label: 'Expiring OSS', count: libs_expiring_oss, color: colorFindingOrange },
      { id: 3, label: 'Commercial only', count: libs_commercial_only, color: colorFindingRed },
      { id: 4, label: 'Unsupported', count: libs_unsupported, color: colorFindingPurple },
      { id: 5, label: 'Other', count: libs_unsupportable, color: '#ccc' },
    ];

    drawPie('#app_support_data_viz', app_support_data, 650, 400, 50, (apps_commercial_only + apps_unsupported), 'apps', 'w/o OSS support', false)
    drawPie('#lib_support_data_viz', lib_support_data, 650, 400, 50, (libs_commercial_only + libs_unsupported), 'libs', 'w/o OSS support', true)
  </script>
</body>
</html>